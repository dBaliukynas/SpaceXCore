@{
    ViewData["Title"] = "Rockets";
}
@model SpaceXCore.Models.ViewModels.RocketsViewModel
@using System.Linq;



<div class="text-center">
    <div class="d-flex justify-content-center align-items-center mb-20">
        <h1 class="display-4">Rockets</h1>
        <svg class="cursor-pointer position-absolute filter-button" data-bs-toggle="modal" data-bs-target="#filteringRocketsModal" xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="#000000e6" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"><line x1="4" y1="21" x2="4" y2="14"></line><line x1="4" y1="10" x2="4" y2="3"></line><line x1="12" y1="21" x2="12" y2="12"></line><line x1="12" y1="8" x2="12" y2="3"></line><line x1="20" y1="21" x2="20" y2="16"></line><line x1="20" y1="12" x2="20" y2="3"></line><line x1="1" y1="14" x2="7" y2="14"></line><line x1="9" y1="8" x2="15" y2="8"></line><line x1="17" y1="16" x2="23" y2="16"></line></svg>
    </div>
    
    <div class="card-list @(Model.ListedRockets.Count() < 4 ? "justify-content-evenly" : "")" x-ref="rocket-card-list">
        @foreach (var item in Model.ListedRockets)
        {
            <div class="card card-item card-item-medium-wide" style="width: 18rem;">
                <img src="@item.Images[0]" class="card-img-top card-image" alt="...">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">@item.Name</h5>
                    <p class="card-text">@item.Description</p>
                    <a href="rocket/@item.Id" class="btn btn-primary mt-auto">More information</a>
                </div>
            </div>
        }
    </div>
</div>
<div class="modal fade" id="filteringRocketsModal" tabindex="-1" aria-labelledby="filteringRocketsModalLabel" style="display: none;" aria-hidden="true"
     x-data="rocketFilters()">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-4" id="filteringRocketsModalLabel">Filtering Rockets</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-1">Name</p>
                <select class="form-select mb-2" id="select-box-rocket-name" name="select-box-rocket-name" aria-label="Default select example" x-model="name" x-init="name=getQueryParameter('name')">
                    <option value="">Select your option</option>
                    @foreach (var item in Model.AllRockets)
                    {
                        <option x-bind:selected="true" selected>@item.Name</option>
                    }
                </select>
                <p class="mb-1">Height</p>

                <input type="number" class="form-control mb-2" id="heightInput" x-model="height" list="heightListOptions" x-init="height=getQueryParameter('height')">
                <datalist id="heightListOptions">
                    @foreach (var height in Model.AllRockets.Select(rocket => rocket.Height).Distinct())
                    {
                        <option>@height</option>
                    }
                </datalist>
                <p class="mb-1">Cost per launch</p>
                <input type="number" class="form-control mb-2" id="costPerLanchInput" x-model="costPerLaunch" list="costPerLaunchListOptions" x-init="costPerLaunch=getQueryParameter('cost-per-launch')">
                <datalist id="costPerLaunchListOptions">
                    @foreach (var item in Model.AllRockets)
                    {
                        <option>@item.Cost</option>
                    }
                </datalist>
                <p class="mb-1">Reusable</p>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1" x-on:click="reusableFS ? reusableFS = null : reusableFS = true" x-init="reusableFS=true">
                    <label class="form-check-label" for="inlineCheckbox1">Yes</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox2" value="option2" x-model="notReusableFS" x-on:click="notReusableFS ? notReusableFS = null : notReusableFS = true; fetchData()" x-init="getQueryParameter('not-reusable-fs')">
                    <label class="form-check-label" for="inlineCheckbox2">No</label>
                </div>
                <button type="button" class="btn btn-primary w-100 mt-5" x-on:click="search()">Search</button>
            </div>
        </div>
    </div>
</div>
<script src="~/js/FilteringRockets.js"></script>
<script>
    function getQueryParameter(parameter)
    {
        const queryString = window.location.search
        const urlParams = new URLSearchParams(queryString);
        //console.log(urlParams.get("height"));
        //console.log(urlParams.get("name"));
        //console.log(urlParams.get("cost-per-launch"));
        //console.log(urlParams.get("reusable-fs") == "true");
        //console.log(urlParams.get("reusable-fs") != null ? (urlParams.get("reusable-fs") == "true" ? true : false) : null);
        //console.log(urlParams.get(urlParams.get("reusable-fs") == null ? (urlParams.get("reusable-fs") == "true" ? true : false) : null));
        //console.log(urlParams.get("not-reusable-fs"));

        var queryParamsDict = { "name" : urlParams.get("name"),
                                "height": urlParams.get("height"),
                                "cost-per-launch": urlParams.get("cost-per-launch"),
            "reusable-fs": urlParams.get("reusable-fs") != null ? (urlParams.get("reusable-fs") == "true" ? true : false) : null,
                                "not-reusable-fs": urlParams.get("not-reusable-fs")};
        return queryParamsDict[parameter];
    }

    //console.log(getQueryParameter("reusable-fs"));
</script>